(in-package :netuno)

(defvar *address* "127.0.0.1")
(defvar *port* 11111)
(defvar *listen-thread* nil)
(defvar *socket* nil)
(defvar *connections* (make-hash-table :test 'equal))
(defvar *player-conns* (make-hash-table :test 'equal))

(defun show-players (conn)
  (format (socket-stream conn) "List of players: ~{~A~^, ~}~%" *players*)
  (force-output (socket-stream conn)))

(defun show-player-hand (name)
  (let ((conn (gethash name *player-conns*)))
    (when conn
      (format (socket-stream conn) "Your hand: ~a~%" (hand-to-string (get-hand name)))
      (force-output (socket-stream conn)))))

(defun init-connection (conn)
  (show-players conn)
  (format (socket-stream conn) "Please choose a nickname:~%")
  (force-output (socket-stream conn))
  (let* ((line (read-line (socket-stream conn) nil))
	 (name (when line (string-trim '(#\newline #\return #\space) line))))
    (when (and name (null (gethash name *player-conns*)))
      (setf (gethash conn *connections*) name)
      (setf (gethash name *player-conns*) conn))
    (if (null (gethash name *player-conns*))
	(progn
	  (format (socket-stream conn) "Nickname already taken.~%")
	  (init-connection conn))
	(progn
	  (maphash (lambda (c n)
		     (declare (ignore n))
		     (format (socket-stream c) "~a has joined the game~%" name)
		     (force-output (socket-stream c)))
		   *connections*)
	  (force-output (socket-stream conn))
	  (add-player name)
	  (show-player-hand name)
	  (format (socket-stream conn) "It's ~a's turn~%" (car *players*))
	  (format (socket-stream conn) "Top card is ~a~%" (card-to-string *top-card*))
	  (force-output (socket-stream conn))
	  name))))

(defun deinit-connection (conn name)
  (remove-player name)
  (remhash conn *connections*)
  (remhash name *player-conns*)
  (socket-close conn))

(defun handle-connection (conn)
  (let ((name (init-connection conn)))
    (do ((line (read-line (socket-stream conn) nil)
	       (read-line (socket-stream conn) nil)))
	((or (null line) (equal (subseq line 0 4) "quit")) nil)
      (cond
	((and (equal (subseq line 0 4) "say ") (> (length line) 5))
	 (maphash (lambda (c n)
		    (declare (ignore n))
		    (format (socket-stream c) "~a: ~a~%" name (subseq line 4 (length line)))
		    (force-output (socket-stream c)))
		  *connections*))
	(t
	 (progn
	   (format (socket-stream conn) "~a~%" line)
	   (force-output (socket-stream conn))))))
    (deinit-connection conn name)))

(defun accept-connections (sock)
  (do ((new-conn (socket-accept sock :element-type 'character)
		 (socket-accept sock :element-type 'character)))
      ((null new-conn) nil)
    (make-thread (lambda () (handle-connection new-conn)))))

(defun start-netuno ()
  (let* ((socket (socket-listen *address* *port*)))
    (setf *socket* socket)
    (setf *listen-thread*
	  (make-thread
	   (lambda () (accept-connections socket))
	   :name "listen-thread"))))

(defun stop-netuno ()
  (maphash (lambda (c name) (declare (ignore name)) (socket-close c)) *connections*)
  (setf *connections* (make-hash-table :test 'equal))
  (setf *player-conns* (make-hash-table :test 'equal))
  (setf *players* '())
  (socket-close *socket*)
  (destroy-thread *listen-thread*)
  (setf *listen-thread* nil)
  (setf *socket* nil))
